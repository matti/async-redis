# Copyright, 2018, by Samuel G. D. Williams. <http://www.codeotaku.com>
# Copyright, 2018, by Huba Nagy.
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

# DO NOT manually edit this file it was generated based on https://raw.githubusercontent.com/antirez/redis-doc/master/commands.json.

module Async
	module Redis
		module Methods
			module AutoGenerated
				module Cluster
					def cluster_addslots(*arguments)
						return call('CLUSTER ADDSLOTS', arguments)
					end

					def cluster_count_failure_reports(*arguments)
						return call('CLUSTER COUNT-FAILURE-REPORTS', arguments)
					end

					def cluster_countkeysinslot(*arguments)
						return call('CLUSTER COUNTKEYSINSLOT', arguments)
					end

					def cluster_delslots(*arguments)
						return call('CLUSTER DELSLOTS', arguments)
					end

					def cluster_failover(*arguments)
						return call('CLUSTER FAILOVER', arguments)
					end

					def cluster_forget(*arguments)
						return call('CLUSTER FORGET', arguments)
					end

					def cluster_getkeysinslot(*arguments)
						return call('CLUSTER GETKEYSINSLOT', arguments)
					end

					def cluster_info(*arguments)
						return call('CLUSTER INFO', arguments)
					end

					def cluster_keyslot(*arguments)
						return call('CLUSTER KEYSLOT', arguments)
					end

					def cluster_meet(*arguments)
						return call('CLUSTER MEET', arguments)
					end

					def cluster_nodes(*arguments)
						return call('CLUSTER NODES', arguments)
					end

					def cluster_replicate(*arguments)
						return call('CLUSTER REPLICATE', arguments)
					end

					def cluster_reset(*arguments)
						return call('CLUSTER RESET', arguments)
					end

					def cluster_saveconfig(*arguments)
						return call('CLUSTER SAVECONFIG', arguments)
					end

					def cluster_set_config_epoch(*arguments)
						return call('CLUSTER SET-CONFIG-EPOCH', arguments)
					end

					def cluster_setslot(*arguments)
						return call('CLUSTER SETSLOT', arguments)
					end

					def cluster_slaves(*arguments)
						return call('CLUSTER SLAVES', arguments)
					end

					def cluster_replicas(*arguments)
						return call('CLUSTER REPLICAS', arguments)
					end

					def cluster_slots(*arguments)
						return call('CLUSTER SLOTS', arguments)
					end

					def readonly(*arguments)
						return call('READONLY', arguments)
					end

					def readwrite(*arguments)
						return call('READWRITE', arguments)
					end

				end
			end
		end
	end
end
