# Copyright, 2018, by Samuel G. D. Williams. <http://www.codeotaku.com>
# Copyright, 2018, by Huba Nagy.
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

# DO NOT manually edit this file it was generated based on https://raw.githubusercontent.com/antirez/redis-doc/master/commands.json.

module Async
	module Redis
		module Methods
			module AutoGenerated
				module Server
					def bgrewriteaof(*arguments)
						return call('BGREWRITEAOF', arguments)
					end

					def bgsave(*arguments)
						return call('BGSAVE', arguments)
					end

					def client_id(*arguments)
						return call('CLIENT ID', arguments)
					end

					def client_kill(*arguments)
						return call('CLIENT KILL', arguments)
					end

					def client_list(*arguments)
						return call('CLIENT LIST', arguments)
					end

					def client_getname(*arguments)
						return call('CLIENT GETNAME', arguments)
					end

					def client_pause(*arguments)
						return call('CLIENT PAUSE', arguments)
					end

					def client_reply(*arguments)
						return call('CLIENT REPLY', arguments)
					end

					def client_setname(*arguments)
						return call('CLIENT SETNAME', arguments)
					end

					def client_unblock(*arguments)
						return call('CLIENT UNBLOCK', arguments)
					end

					def command(*arguments)
						return call('COMMAND', arguments)
					end

					def command_count(*arguments)
						return call('COMMAND COUNT', arguments)
					end

					def command_getkeys(*arguments)
						return call('COMMAND GETKEYS', arguments)
					end

					def command_info(*arguments)
						return call('COMMAND INFO', arguments)
					end

					def config_get(*arguments)
						return call('CONFIG GET', arguments)
					end

					def config_rewrite(*arguments)
						return call('CONFIG REWRITE', arguments)
					end

					def config_set(*arguments)
						return call('CONFIG SET', arguments)
					end

					def config_resetstat(*arguments)
						return call('CONFIG RESETSTAT', arguments)
					end

					def dbsize(*arguments)
						return call('DBSIZE', arguments)
					end

					def debug_object(*arguments)
						return call('DEBUG OBJECT', arguments)
					end

					def debug_segfault(*arguments)
						return call('DEBUG SEGFAULT', arguments)
					end

					def flushall(*arguments)
						return call('FLUSHALL', arguments)
					end

					def flushdb(*arguments)
						return call('FLUSHDB', arguments)
					end

					def info(*arguments)
						return call('INFO', arguments)
					end

					def lastsave(*arguments)
						return call('LASTSAVE', arguments)
					end

					def memory_doctor(*arguments)
						return call('MEMORY DOCTOR', arguments)
					end

					def memory_help(*arguments)
						return call('MEMORY HELP', arguments)
					end

					def memory_malloc_stats(*arguments)
						return call('MEMORY MALLOC-STATS', arguments)
					end

					def memory_purge(*arguments)
						return call('MEMORY PURGE', arguments)
					end

					def memory_stats(*arguments)
						return call('MEMORY STATS', arguments)
					end

					def memory_usage(*arguments)
						return call('MEMORY USAGE', arguments)
					end

					def monitor(*arguments)
						return call('MONITOR', arguments)
					end

					def role(*arguments)
						return call('ROLE', arguments)
					end

					def save(*arguments)
						return call('SAVE', arguments)
					end

					def shutdown(*arguments)
						return call('SHUTDOWN', arguments)
					end

					def slaveof(*arguments)
						return call('SLAVEOF', arguments)
					end

					def replicaof(*arguments)
						return call('REPLICAOF', arguments)
					end

					def slowlog(*arguments)
						return call('SLOWLOG', arguments)
					end

					def sync(*arguments)
						return call('SYNC', arguments)
					end

					def time(*arguments)
						return call('TIME', arguments)
					end

				end
			end
		end
	end
end
