# Copyright, 2018, by Samuel G. D. Williams. <http://www.codeotaku.com>
# Copyright, 2018, by Huba Nagy.
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

# DO NOT manually edit this file it was generated based on https://raw.githubusercontent.com/antirez/redis-doc/master/commands.json.

module Async
	module Redis
		module Methods
			module AutoGenerated
				module Sets
					def sadd(*arguments)
						return call('SADD', arguments)
					end

					def scard(*arguments)
						return call('SCARD', arguments)
					end

					def sdiff(*arguments)
						return call('SDIFF', arguments)
					end

					def sdiffstore(*arguments)
						return call('SDIFFSTORE', arguments)
					end

					def sinter(*arguments)
						return call('SINTER', arguments)
					end

					def sinterstore(*arguments)
						return call('SINTERSTORE', arguments)
					end

					def sismember(*arguments)
						return call('SISMEMBER', arguments)
					end

					def smembers(*arguments)
						return call('SMEMBERS', arguments)
					end

					def smove(*arguments)
						return call('SMOVE', arguments)
					end

					def spop(*arguments)
						return call('SPOP', arguments)
					end

					def srandmember(*arguments)
						return call('SRANDMEMBER', arguments)
					end

					def srem(*arguments)
						return call('SREM', arguments)
					end

					def sunion(*arguments)
						return call('SUNION', arguments)
					end

					def sunionstore(*arguments)
						return call('SUNIONSTORE', arguments)
					end

					def sscan(*arguments)
						return call('SSCAN', arguments)
					end

				end
			end
		end
	end
end
