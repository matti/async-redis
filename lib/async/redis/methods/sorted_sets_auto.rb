# Copyright, 2018, by Samuel G. D. Williams. <http://www.codeotaku.com>
# Copyright, 2018, by Huba Nagy.
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

# DO NOT manually edit this file it was generated based on https://raw.githubusercontent.com/antirez/redis-doc/master/commands.json.

module Async
	module Redis
		module Methods
			module AutoGenerated
				module SortedSets
					def bzpopmin(*arguments)
						return call('BZPOPMIN', arguments)
					end

					def bzpopmax(*arguments)
						return call('BZPOPMAX', arguments)
					end

					def zadd(*arguments)
						return call('ZADD', arguments)
					end

					def zcard(*arguments)
						return call('ZCARD', arguments)
					end

					def zcount(*arguments)
						return call('ZCOUNT', arguments)
					end

					def zincrby(*arguments)
						return call('ZINCRBY', arguments)
					end

					def zinterstore(*arguments)
						return call('ZINTERSTORE', arguments)
					end

					def zlexcount(*arguments)
						return call('ZLEXCOUNT', arguments)
					end

					def zpopmax(*arguments)
						return call('ZPOPMAX', arguments)
					end

					def zpopmin(*arguments)
						return call('ZPOPMIN', arguments)
					end

					def zrange(*arguments)
						return call('ZRANGE', arguments)
					end

					def zrangebylex(*arguments)
						return call('ZRANGEBYLEX', arguments)
					end

					def zrevrangebylex(*arguments)
						return call('ZREVRANGEBYLEX', arguments)
					end

					def zrangebyscore(*arguments)
						return call('ZRANGEBYSCORE', arguments)
					end

					def zrank(*arguments)
						return call('ZRANK', arguments)
					end

					def zrem(*arguments)
						return call('ZREM', arguments)
					end

					def zremrangebylex(*arguments)
						return call('ZREMRANGEBYLEX', arguments)
					end

					def zremrangebyrank(*arguments)
						return call('ZREMRANGEBYRANK', arguments)
					end

					def zremrangebyscore(*arguments)
						return call('ZREMRANGEBYSCORE', arguments)
					end

					def zrevrange(*arguments)
						return call('ZREVRANGE', arguments)
					end

					def zrevrangebyscore(*arguments)
						return call('ZREVRANGEBYSCORE', arguments)
					end

					def zrevrank(*arguments)
						return call('ZREVRANK', arguments)
					end

					def zscore(*arguments)
						return call('ZSCORE', arguments)
					end

					def zunionstore(*arguments)
						return call('ZUNIONSTORE', arguments)
					end

					def zscan(*arguments)
						return call('ZSCAN', arguments)
					end

				end
			end
		end
	end
end
