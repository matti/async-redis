# Copyright, 2018, by Samuel G. D. Williams. <http://www.codeotaku.com>
# Copyright, 2018, by Huba Nagy.
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

task :generate_dsl do
	require "net/http"
  require "net/https"
  require "json"
  require "uri"

  url = URI.parse "https://raw.githubusercontent.com/antirez/redis-doc/master/commands.json"
	puts "Downloading the list of commands from #{url}."

  client = Net::HTTP.new url.host, url.port
  client.use_ssl = true
  response = client.get url.path
  if response.is_a?(Net::HTTPSuccess)
		commands = JSON.parse(response.body)
  else
    response.error!
	end

	# There is a bit of a discrepancy between how the 
	# groups appear in the JSON and how they appear in
	# the compiled documentation, this is a mapping from json
	# to documentation
	groups = {'generic' => 'keys',
					  'string' => 'strings',
						'list' => 'lists',
						'set' => 'sets',
						'sorted_set' => 'sorted_sets',
						'hash' => 'hashes',
						'connection' => 'connection',
						'server' => 'server',
						'scripting' => 'scripting',
						'hyperloglog' => 'hyper_log_log',
						'cluster' => 'cluster',
						'geo' => 'geo',
						'stream' => 'streams'}.freeze

	groups.each_pair do |spec_group, group|
		# CamelCase for the module name
		group_module = group.split('_').collect(&:capitalize).join

		puts "Generating DSL for #{group_module}."
		group_commands = commands.select do |command, command_spec|
			command_spec["group"] == spec_group
		end
		puts "\tFound #{group_commands.length} commands in this group."

		File.open "lib/async/redis/methods/#{group}_auto.rb", 'w' do |file|
			file.write <<-LICENSE_HEADER
# Copyright, 2018, by Samuel G. D. Williams. <http://www.codeotaku.com>
# Copyright, 2018, by Huba Nagy.
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

# DO NOT manually edit this file it was generated based on #{url}.

			LICENSE_HEADER

			file.write <<-MODULE_START
module Async
	module Redis
		module Methods
			module AutoGenerated
				module #{group_module}
			MODULE_START

			group_commands.each do |command, command_spec|
				puts "\t#{command} - #{command_spec["summary"][0..50]}"
				command_method = command.downcase.split(' ').join('_').split('-').join('_')

				file.write <<-METHOD
					def #{command_method}(*arguments)
						return call('#{command}', arguments)
					end

				METHOD

			end

			file.write <<-MODULE_END
				end
			end
		end
	end
end
			MODULE_END

		end
	end
end
